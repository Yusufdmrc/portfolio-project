"use client";

import { motion } from "framer-motion";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/Button";
import { Calendar, ArrowRight } from "lucide-react";
import Link from "next/link";
import Image from "next/image";
import { useState } from "react";

const blogPosts = [
  {
    id: 1,
    title: "Next.js ile Full-Stack Web Projesi OluÅŸturma Yol HaritasÄ±",
    excerpt:
      "SÄ±fÄ±rdan Next.js ile modern full-stack web uygulamasÄ± geliÅŸtirme sÃ¼recinin detaylÄ± rehberi. Database entegrasyonu, authentication, deployment ve best practices.",
    content: `GÃ¼nÃ¼mÃ¼zde full-stack web geliÅŸtirme, yazÄ±lÄ±m dÃ¼nyasÄ±nda en Ã§ok ihtiyaÃ§ duyulan alanlardan biri haline geldi. Hem frontend hem de backend tarafÄ±nda yetkin olmak, bir geliÅŸtiriciyi Ã§ok daha esnek ve deÄŸerli kÄ±lÄ±yor. Bu yazÄ±da, modern teknolojilerle bir full-stack web projesi geliÅŸtirmek isteyenler iÃ§in Next.js tabanlÄ± bir yol haritasÄ± paylaÅŸacaÄŸÄ±m.

## 1. Temel AltyapÄ±yÄ± HazÄ±rlama
Next.js projesi oluÅŸturmak iÃ§in:
\`\`\`bash
npx create-next-app@latest my-project
cd my-project
npm run dev
\`\`\`

## 2. Frontend: KullanÄ±cÄ± ArayÃ¼zÃ¼nÃ¼ Tasarlama
Tailwind CSS ile modern, responsive ve component tabanlÄ± UI oluÅŸturmak iÃ§in:
\`\`\`bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
\`\`\`

## 3. Backend: API KatmanÄ±
Next.js projelerinde app/api/ klasÃ¶rÃ¼ altÄ±na dosyalar ekleyerek backend endpointleri tanÄ±mlayabilirsin.

## 4. VeritabanÄ± SeÃ§imi
PostgreSQL / MySQL iÃ§in Prisma ORM:
\`\`\`bash
npm install prisma @prisma/client
npx prisma init
\`\`\``,
    author: "Yusuf Demirci",
    publishedAt: "2025-08-30",
    readingTime: "15 min",
    category: "Web Development",
    tags: ["Next.js", "Tam YÄ±ÄŸÄ±n", "React", "TypeScript", "Prisma"],
    image:
      "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=800&q=80",
    slug: "nextjs-fullstack-yol-haritasi",
  },
  {
    id: 2,
    title: "Test Otomasyon Projelerindeki CI/CD SÃ¼reÃ§leri",
    excerpt:
      "Modern test otomasyon projelerinde CI/CD pipeline'larÄ± nasÄ±l kurulur ve optimize edilir? GitHub Actions, Jenkins ve Docker entegrasyonu.",
    content: `YazÄ±lÄ±m geliÅŸtirme dÃ¼nyasÄ±nda hÄ±z, gÃ¼venilirlik ve kalite artÄ±k vazgeÃ§ilmez Ã¼Ã§lÃ¼ haline geldi. Ã–zellikle bÃ¼yÃ¼k ve kurumsal projelerde, kullanÄ±cÄ±ya hatasÄ±z Ã¼rÃ¼n sunmak iÃ§in sadece geliÅŸtirme deÄŸil, test sÃ¼reÃ§lerinin de modern yÃ¶ntemlerle yÃ¶netilmesi gerekiyor.

## CI/CD Nedir?
**Continuous Integration (SÃ¼rekli Entegrasyon)**
- GeliÅŸtiriciler kodlarÄ±nÄ± sÄ±k sÄ±k ortak bir repoya push eder
- Her commit sonrasÄ± proje otomatik build edilir ve testler Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r

**Continuous Deployment (SÃ¼rekli DaÄŸÄ±tÄ±m)**
- BaÅŸarÄ±lÄ± build ve testlerden sonra uygulama staging veya production ortamÄ±na otomatik deploy edilir

## Test Otomasyonunun CI/CD SÃ¼reÃ§lerindeki RolÃ¼
Pipeline iÃ§inde farklÄ± seviyelerde testler koÅŸulur:
- **Unit Testler** â†’ Kodun en kÃ¼Ã§Ã¼k parÃ§alarÄ±nÄ±n doÄŸruluÄŸunu kontrol eder
- **Integration Testler** â†’ Servislerin birlikte Ã§alÄ±ÅŸabilirliÄŸini test eder
- **API Testleri** â†’ Backend endpointlerinin doÄŸru yanÄ±t verdiÄŸinden emin olunur`,
    author: "Yusuf Demirci",
    publishedAt: "2025-08-26",
    readingTime: "12 min",
    category: "Test Otomasyonu",
    tags: ["CI/CD", "Test", "GitHub Actions", "Jenkins", "Otomasyon"],
    image:
      "https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800&q=80",
    slug: "test-otomasyon-cicd-surecleri",
  },
  {
    id: 3,
    title: "TypeScript ile Tip GÃ¼venli Kod YazÄ±mÄ±",
    excerpt:
      "TypeScript'in sunduÄŸu type safety Ã¶zellikleri ile daha gÃ¼venilir ve maintainable kod yazma teknikleri.",
    content: `JavaScript, esnekliÄŸi sayesinde dÃ¼nyanÄ±n en popÃ¼ler programlama dillerinden biri haline geldi. Ancak bu esneklik, bÃ¼yÃ¼k Ã¶lÃ§ekli projelerde ciddi sorunlara yol aÃ§abiliyor: beklenmeyen runtime hatalarÄ±, zor bakÄ±m sÃ¼reÃ§leri ve dÃ¼ÅŸÃ¼k kod gÃ¼venilirliÄŸi.

## ðŸŽ¯ Tip GÃ¼venliÄŸi (Type Safety) Nedir?
Tip gÃ¼venliÄŸi, bir deÄŸiÅŸkenin ya da fonksiyonun alabileceÄŸi deÄŸerlerin Ã¶nceden tanÄ±mlanmasÄ± anlamÄ±na gelir.

JavaScript'te:
\`\`\`javascript
function toUpperCase(str) {
  return str.toUpperCase();
}
toUpperCase(42); // Runtime hatasÄ±!
\`\`\`

TypeScript ile:
\`\`\`typescript
function toUpperCase(str: string): string {
  return str.toUpperCase();
}
toUpperCase(42); // Derleme hatasÄ±, runtime'a bile gelmez
\`\`\`

## ðŸ”§ TypeScript ile Tip GÃ¼venliÄŸi
1. **Temel Tipler:** number, string, boolean
2. **Interface ve Type Alias:** API sÃ¶zleÅŸmeleri
3. **Generic'ler:** Yeniden kullanÄ±labilir kod`,
    author: "Yusuf Demirci",
    publishedAt: "2025-08-20",
    readingTime: "18 min",
    category: "Programlama",
    tags: [
      "TypeScript",
      "JavaScript",
      "Tip GÃ¼venliÄŸi",
      "Programlama",
      "GeliÅŸtirme",
    ],
    image:
      "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=800&q=80",
    slug: "typescript-tip-guvenli-kod",
  },
  {
    id: 4,
    title:
      "Frontendâ€™den YazÄ±lÄ±m Test MÃ¼hendisliÄŸine: Kariyer YolculuÄŸum ve Ã–ÄŸrendiklerim",
    excerpt:
      "Frontend geliÅŸtirici olarak baÅŸladÄ±ÄŸÄ±m kariyerimde yazÄ±lÄ±m test mÃ¼hendisliÄŸine geÃ§iÅŸ sÃ¼recim, Ã¶ÄŸrendiklerim ve bu deneyimimin bana kattÄ±klarÄ±.",
    content: `YazÄ±lÄ±m dÃ¼nyasÄ±nda her gÃ¼n yeni bir teknoloji, yeni bir trend ve yeni bir bakÄ±ÅŸ aÃ§Ä±sÄ± ortaya Ã§Ä±kÄ±yor. Bu hÄ±zlÄ± deÄŸiÅŸim iÃ§inde kariyer yolculuÄŸum da farklÄ± rollerden geÃ§erek ÅŸekillendi. Ãœniversite yÄ±llarÄ±mda frontend geliÅŸtirici olarak baÅŸladÄ±ÄŸÄ±m bu yolculuk, bugÃ¼n yazÄ±lÄ±m test mÃ¼hendisi olarak devam ediyor.

## Frontend DÃ¼nyasÄ±na Ä°lk AdÄ±mlarÄ±m

Kariyerime ilk adÄ±mÄ± attÄ±ÄŸÄ±mda, odak noktam kullanÄ±cÄ± arayÃ¼zÃ¼ geliÅŸtirme idi. HTML, CSS ve JavaScript ile baÅŸladÄ±m. Zamanla React ve Next.js gibi modern frameworklerle Ã§alÄ±ÅŸtÄ±m. Bu sÃ¼reÃ§ bana ÅŸunlarÄ± Ã¶ÄŸretti:

**KullanÄ±cÄ± deneyiminin Ã¶nemi:** Bir web sitesinin gÃ¶rsel olarak ÅŸÄ±k olmasÄ± kadar, hÄ±zlÄ± ve eriÅŸilebilir olmasÄ± da kritik.

**Kod okunabilirliÄŸi:** Projelerde ekip Ã§alÄ±ÅŸmasÄ± iÃ§in temiz ve sÃ¼rdÃ¼rÃ¼lebilir kod yazmak ÅŸart.

**Responsive tasarÄ±m:** KullanÄ±cÄ±larÄ±n farklÄ± cihazlarda sorunsuz deneyim yaÅŸamasÄ± temel bir gereklilik.

Frontend tecrÃ¼bem bana sadece teknik bilgi kazandÄ±rmadÄ±; aynÄ± zamanda kullanÄ±cÄ± gÃ¶zÃ¼yle dÃ¼ÅŸÃ¼nme becerisi kazandÄ±rdÄ±.

## YazÄ±lÄ±m Test MÃ¼hendisliÄŸine GeÃ§iÅŸ

Frontend'de Ã§alÄ±ÅŸÄ±rken fark ettim ki, geliÅŸtirdiÄŸimiz Ã¶zelliklerin sadece kodlanmasÄ± deÄŸil, doÄŸru Ã§alÄ±ÅŸÄ±p Ã§alÄ±ÅŸmadÄ±ÄŸÄ±nÄ±n garanti edilmesi de en az o kadar Ã¶nemli. Bu farkÄ±ndalÄ±k beni yazÄ±lÄ±m test mÃ¼hendisliÄŸine yÃ¶nlendirdi.

Test mÃ¼hendisliÄŸine geÃ§iÅŸimle birlikte yeni sorumluluklar Ã¼stlendim:

- **Manuel testler:** KullanÄ±cÄ± senaryolarÄ±nÄ± adÄ±m adÄ±m test etmek
- **Otomasyon testleri:** Selenium, TestNG, Cucumber, Appium gibi araÃ§larla sÃ¼reÃ§leri otomatize etmek
- **API testleri:** Backend fonksiyonlarÄ±nÄ±n doÄŸru Ã§alÄ±ÅŸtÄ±ÄŸÄ±ndan emin olmak
- **Test yaÅŸam dÃ¶ngÃ¼sÃ¼:** Gereksinim analizi, test senaryosu yazÄ±mÄ±, hata raporlama ve regression sÃ¼reÃ§leri

## Frontend TecrÃ¼besinin Test MÃ¼hendisliÄŸine KatkÄ±sÄ±

Frontend geÃ§miÅŸim, test mÃ¼hendisliÄŸi yolculuÄŸumda bÃ¼yÃ¼k avantaj saÄŸladÄ±:

1. **UI testlerinde kolaylÄ±k:** ArayÃ¼z elementlerini tanÄ±mak ve doÄŸru ÅŸekilde test etmek
2. **GeliÅŸtirici ile iletiÅŸim:** Frontend teknolojilerini bildiÄŸim iÃ§in ekiple verimli iletiÅŸim
3. **KullanÄ±cÄ± odaklÄ± bakÄ±ÅŸ aÃ§Ä±sÄ±:** Her testte "kullanÄ±cÄ± bu durumda ne gÃ¶rÃ¼r?" diye dÃ¼ÅŸÃ¼nmek

## Ã–ÄŸrendiklerim ve Ã‡Ä±karÄ±mlarÄ±m

- **Kodlama bilgisi test mÃ¼hendisliÄŸi iÃ§in bÃ¼yÃ¼k artÄ±**
- **Test sadece hata bulmak deÄŸil, kaliteyi gÃ¼vence altÄ±na almak**  
- **TakÄ±m Ã§alÄ±ÅŸmasÄ± olmazsa olmaz**
- **SÃ¼rekli Ã¶ÄŸrenmek ÅŸart**

EÄŸer sen de benzer bir kariyer yolculuÄŸuna Ã§Ä±kmak istiyorsan, ÅŸunu unutma: Her rol birbirini besliyor. Bir alandaki tecrÃ¼ben, diÄŸerinde sana bÃ¼yÃ¼k avantaj saÄŸlayabilir.`,
    author: "Yusuf Demirci",
    publishedAt: "2025-08-14",
    readingTime: "8 min",
    category: "Career",
    tags: ["Kariyer", "Frontend", "Test MÃ¼hendisliÄŸi", "Deneyim", "GeÃ§iÅŸ"],
    image:
      "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=800&q=80",
    slug: "frontend-den-test-muhendisligine-kariyer-yolculugu",
  },
];

const categories = [
  "TÃ¼mÃ¼",
  "Web Development",
  "Test Otomasyonu",
  "Programlama",
  "Career",
  "API Testing",
];

export default function BlogPage() {
  const [selectedCategory, setSelectedCategory] = useState("TÃ¼mÃ¼");

  const filteredPosts =
    selectedCategory === "TÃ¼mÃ¼"
      ? blogPosts
      : blogPosts.filter((post) => post.category === selectedCategory);

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.6 } },
  };

  return (
    <div className="py-24 sm:py-32 min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-slate-800 dark:to-indigo-900">
      <div className="mx-auto max-w-7xl px-6 lg:px-8">
        {/* Header Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="mx-auto max-w-4xl text-center mb-16"
        >
          <h1 className="text-4xl sm:text-6xl font-bold bg-gradient-to-r from-gray-900 via-blue-800 to-indigo-800 dark:from-white dark:via-blue-200 dark:to-indigo-200 bg-clip-text text-transparent mb-6">
            Blog
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-300 leading-relaxed">
            YazÄ±lÄ±m geliÅŸtirme, test otomasyonu ve teknoloji dÃ¼nyasÄ±ndan
            deneyimlerimi, Ã¶ÄŸrendiklerimi ve gÃ¶rÃ¼ÅŸlerimi paylaÅŸtÄ±ÄŸÄ±m alan.
          </p>
        </motion.div>

        {/* Category Filter */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="flex flex-wrap justify-center gap-2 mb-12"
        >
          {categories.map((category) => (
            <Button
              key={category}
              variant={category === selectedCategory ? "primary" : "outline"}
              size="sm"
              className="mb-2"
              onClick={() => setSelectedCategory(category)}
            >
              {category}
            </Button>
          ))}
        </motion.div>

        {/* Featured Post */}
        {filteredPosts.length > 1 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.3 }}
            className="mb-16"
          >
            <div className="relative overflow-hidden rounded-3xl bg-gradient-to-r from-blue-600 to-indigo-600 p-8 text-white">
              <Image
                src={filteredPosts[0].image}
                alt={filteredPosts[0].title}
                fill
                className="object-cover"
              />
              <div className="absolute inset-0 bg-gradient-to-r from-blue-600/90 to-indigo-600/90" />
              <div className="relative z-10 max-w-4xl">
                <Badge
                  variant="secondary"
                  className="mb-4 text-white bg-white/20"
                >
                  Ã–ne Ã‡Ä±kan YazÄ±
                </Badge>
                <h2 className="text-3xl md:text-4xl font-bold mb-4">
                  {filteredPosts[0].title}
                </h2>
                <p className="text-blue-100 text-lg leading-relaxed mb-6">
                  {filteredPosts[0].excerpt}
                </p>
                <div className="flex items-center space-x-4 text-sm text-blue-200 mb-6">
                  <div className="flex items-center">
                    <Calendar className="w-4 h-4 mr-2" />
                    {new Date(filteredPosts[0].publishedAt).toLocaleDateString(
                      "tr-TR"
                    )}
                  </div>
                </div>
                <Link href={`/blog/${filteredPosts[0].slug}`}>
                  <Button variant="secondary" size="lg" className="group">
                    YazÄ±yÄ± Oku
                    <ArrowRight className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" />
                  </Button>
                </Link>
              </div>
            </div>
          </motion.div>
        )}

        {/* Blog Posts Grid */}
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
        >
          {(filteredPosts.length > 1
            ? filteredPosts.slice(1)
            : filteredPosts
          ).map((post) => (
            <motion.article
              key={post.id}
              variants={itemVariants}
              whileHover={{ y: -5 }}
              className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-700/50 shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden group"
            >
              {/* Post Image */}
              <div className="h-48 relative overflow-hidden">
                <Image
                  src={post.image}
                  alt={post.title}
                  fill
                  className="object-cover group-hover:scale-105 transition-transform duration-300"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent" />
                <div className="absolute top-4 left-4">
                  <Badge variant="secondary" className="text-xs">
                    {post.category}
                  </Badge>
                </div>
              </div>

              <div className="p-6">
                <div className="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 mb-3">
                  <div className="flex items-center">
                    <Calendar className="w-4 h-4 mr-1" />
                    {new Date(post.publishedAt).toLocaleDateString("tr-TR")}
                  </div>
                </div>

                <h3 className="text-xl font-bold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors mb-3 line-clamp-2">
                  {post.title}
                </h3>

                <p className="text-gray-600 dark:text-gray-300 text-sm leading-relaxed mb-4 line-clamp-3">
                  {post.excerpt}
                </p>

                {/* Tags */}
                <div className="flex flex-wrap gap-1 mb-6">
                  {post.tags.slice(0, 3).map((tag) => (
                    <Badge key={tag} variant="outline" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                  {post.tags.length > 3 && (
                    <Badge variant="outline" className="text-xs">
                      +{post.tags.length - 3}
                    </Badge>
                  )}
                </div>

                <Link href={`/blog/${post.slug}`}>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="group p-0 h-auto"
                  >
                    DevamÄ±nÄ± Oku
                    <ArrowRight className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" />
                  </Button>
                </Link>
              </div>
            </motion.article>
          ))}
        </motion.div>
      </div>
    </div>
  );
}
